"use client";

import { create } from "zustand";
import axios from "axios";

// üí¨ Type Definition - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Comment
type Comment = {
  id: number;
  name: string;
  email: string;
  body: string;
  postId: number;
};

// üè™ State Interface - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Comments Store State
type CommentsState = {
  // üìä Data State
  comments: Comment[];              // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  commentsByPost: Record<number, Comment[]>; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Post ID
  loading: boolean;                 // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  error: string | null;             // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  
  // üéØ Actions - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  fetchCommentsByPostId: (postId: number) => Promise<Comment[]>; // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° Post ID
  fetchAllComments: () => Promise<void>;                        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getCommentsByPostId: (postId: number) => Comment[];           // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å state ‡∏ï‡∏≤‡∏° Post ID
  addComment: (comment: Omit<Comment, 'id'>) => void;          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  clearError: () => void;                                       // ‡∏•‡πâ‡∏≤‡∏á error
  reset: () => void;                                            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
};

// üé® Zustand Comments Store Creation
export const useComments = create<CommentsState>((set, get) => ({
  // üéØ Initial State - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  comments: [],
  commentsByPost: {},
  loading: false,
  error: null,

  // üì• Fetch Comments by Post ID - ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° Post ID
  fetchCommentsByPostId: async (postId: number) => {
    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
      set({ loading: true, error: null });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á post ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô cache ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const currentCommentsByPost = get().commentsByPost;
      if (currentCommentsByPost[postId]) {
        set({ loading: false });
        return currentCommentsByPost[postId];
      }
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      const { data } = await axios.get<Comment[]>(
        `https://jsonplaceholder.typicode.com/posts/${postId}/comments`
      );
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const updatedCommentsByPost = {
        ...currentCommentsByPost,
        [postId]: data
      };
      
      const updatedAllComments = [...get().comments];
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô state
      data.forEach(comment => {
        if (!updatedAllComments.find(c => c.id === comment.id)) {
          updatedAllComments.push(comment);
        }
      });
      
      set({ 
        commentsByPost: updatedCommentsByPost,
        comments: updatedAllComments,
        loading: false 
      });
      
      return data;
      
    } catch (error) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
      const errorMessage = error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå";
      set({ error: errorMessage, loading: false });
      return [];
    }
  },

  // üì• Fetch All Comments - ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  fetchAllComments: async () => {
    try {
      set({ loading: true, error: null });
      
      const { data } = await axios.get<Comment[]>(
        "https://jsonplaceholder.typicode.com/comments"
      );
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° Post ID
      const groupedComments: Record<number, Comment[]> = {};
      data.forEach(comment => {
        if (!groupedComments[comment.postId]) {
          groupedComments[comment.postId] = [];
        }
        groupedComments[comment.postId].push(comment);
      });
      
      set({ 
        comments: data, 
        commentsByPost: groupedComments,
        loading: false 
      });
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå";
      set({ error: errorMessage, loading: false });
    }
  },

  // üîç Get Comments by Post ID from State - ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å state ‡∏ï‡∏≤‡∏° Post ID
  getCommentsByPostId: (postId: number) => {
    const commentsByPost = get().commentsByPost;
    return commentsByPost[postId] || [];
  },

  // ‚ûï Add New Comment - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  addComment: (newComment) => {
    const currentComments = get().comments;
    const newId = Math.max(...currentComments.map(comment => comment.id), 0) + 1;
    const commentWithId = { ...newComment, id: newId };
    
    const updatedComments = [commentWithId, ...currentComments];
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó commentsByPost
    const currentCommentsByPost = get().commentsByPost;
    const postComments = currentCommentsByPost[newComment.postId] || [];
    const updatedCommentsByPost = {
      ...currentCommentsByPost,
      [newComment.postId]: [commentWithId, ...postComments]
    };
    
    set({ 
      comments: updatedComments,
      commentsByPost: updatedCommentsByPost
    });
  },

  // üßπ Clear Error - ‡∏•‡πâ‡∏≤‡∏á error
  clearError: () => {
    set({ error: null });
  },

  // üîÑ Reset State - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  reset: () => {
    set({ 
      comments: [], 
      commentsByPost: {},
      loading: false, 
      error: null 
    });
  },
}));